(*------------------ PALIER 0 ------------------*)

(*0.1 Egalite*)

let rec are equal (a,b) = match (a,b) with
|[],[] -> true
|[],_ -> false
|_,[] -> false
|(x::a),(y::b) when x=y  -> equal (a,b)
|_,_ -> false;;
 
are equal ([1;2;3],[1;2;3;4]);;
are equal (['a','b','c'],['a','b','c']);;
are equal ([1,2,3],[1,2,3]);;


(*0.2 Concatenation*)

let rec append a b = match a with
  |[] -> b
  |e::a -> e::(append a b);;

append [1;2;3] [42;0;21];;


(*0.3 Inversion*)

let reverse a =
  let rec rev a b = match a with
    |[] -> b
    |e::a -> rev a (e::b)
  in
rev a [];;

reverse ['a';'l';'l';'o'];;


(*0.4 Impression*)

let rec print a = match a with
  |[] -> " "
  |e::a -> ((Char.escaped e)^  print a);;

print ['a';'b';'c'];;


(*------------------ PALIER 1 ------------------*)

(*1.1 Validite*)

let rec is_morse a  =  match a with
  |[] -> true
  |e::a when e= '-' || e='.' -> is_morse a
  |_ -> false ;;

is_morse ['-';'-';'-'];;


(*1.2 Conversion*)

 let letter_to_morse char= match char with
  |'a'|'A' -> ['.';'-']
  |'b'|'B' -> ['-';'.';'.';'.']
  |'c'|'C' -> ['-';'.';'-';'.']
  |'d'|'D' -> ['-';'.';'.']
  |'e'|'E' -> ['.']
  |'f'|'F' -> ['.';'.';'-';'.']
  |'g'|'G' -> ['-';'-';'.']
  |'h'|'H' -> ['.';'.';'.';'.']
  |'i'|'I' -> ['.';'.']
  |'j'|'J' -> ['-';'.';'.']
  |'k'|'K' -> ['-';'.';'-']
  |'l'|'L' -> ['.';'-';'.';'.']
  |'m'|'M' -> ['-';'-']
  |'N'|'n' -> ['-';'.']
  |'o'|'O' -> ['-';'-';'-']
  |'p'|'P' -> ['.';'-';'-';'.']
  |'q'|'Q' -> ['-';'-';'.';'-']
  |'r'|'R' -> ['.';'-';'.']
  |'s'|'S' -> ['.';'.';'.']
  |'t'|'T' -> ['-']
  |'u'|'U' -> ['.';'.';'-']
  |'v'|'V' -> ['.';'.';'.';'-']
  |'w'|'W' -> ['.';'-';'-']
  |'x'|'X' -> ['-';'.';'.';'-']
  |'y'|'Y' -> ['-';'.';'-';'-']
  |'z'|'Z' -> ['-';'-';'.';'.']
  |'1' -> ['.';'-';'-';'-';'-']
  |'2' -> ['.';'.';'-';'-';'-']
  |'3' -> ['.';'.';'.';'-';'-']
  |'4' -> ['.';'.';'.';'.';'-']
  |'5' -> ['.';'.';'.';'.';'.']
  |'6' -> ['-';'.';'.';'.';'.']
  |'7' -> ['-';'-';'.';'.';'.']
  |'8' -> ['-';'-';'-';'.';'.']
  |'9' -> ['-';'-';'-';'-';'.']
  |'0' -> ['-';'-';'-';'-';'-']
  |_ -> failwith "Not a letter";;

 letter_to_morse 'S' ;;


(*------------------ PALIER 2 ------------------*)


(*2.1 Conversion*)

let letter_to_morse a = match a with
  |'a'|'A' -> ['.';'-']
  |'b'|'B' -> ['-';'.';'.';'.']
  |'c'|'C' -> ['-';'.';'-';'.']
  |'d'|'D' -> ['-';'.';'.']
  |'e'|'E' -> ['.']
  |'f'|'F' -> ['.';'.';'-';'.']
  |'g'|'G' -> ['-';'-';'.']
  |'h'|'H' -> ['.';'.';'.';'.']
  |'i'|'I' -> ['.';'.']
  |'j'|'J' -> ['-';'.';'.']
  |'k'|'K' -> ['-';'.';'-']
  |'l'|'L' -> ['.';'-';'.';'.']
  |'m'|'M' -> ['-';'-']
  |'N'|'n' -> ['-';'.']
  |'o'|'O' -> ['-';'-';'-']
  |'p'|'P' -> ['.';'-';'-';'.']
  |'q'|'Q' -> ['-';'-';'.';'-']
  |'r'|'R' -> ['.';'-';'.']
  |'s'|'S' -> ['.';'.';'.']
  |'t'|'T' -> ['-']
  |'u'|'U' -> ['.';'.';'-']
  |'v'|'V' -> ['.';'.';'.';'-']
  |'w'|'W' -> ['.';'-';'-']
  |'x'|'X' -> ['-';'.';'.';'-']
  |'y'|'Y' -> ['-';'.';'-';'-']
  |'z'|'Z' -> ['-';'-';'.';'.']
  |'1' -> ['.';'-';'-';'-';'-']
  |'2' -> ['.';'.';'-';'-';'-']
  |'3' -> ['.';'.';'.';'-';'-']
  |'4' -> ['.';'.';'.';'.';'-']
  |'5' -> ['.';'.';'.';'.';'.']
  |'6' -> ['-';'.';'.';'.';'.']
  |'7' -> ['-';'-';'.';'.';'.']
  |'8' -> ['-';'-';'-';'.';'.']
  |'9' -> ['-';'-';'-';'-';'.']
  |'0' -> ['-';'-';'-';'-';'-']
  |_ -> failwith "Not a letter";;

let rec word_to_morse a = match a with
  |[] -> []
  |e::a ->(letter_to_morse e)::(word_to_morse a);;

word_to_morse ['S';'O';'S'];;



(*2.2 Une autre facon de voir les choses*)


let rec to_single_list list = match list with
  |[]->[]
  |e::l-> append (e) (to_single_list l);;

to_single_list [['-';'-';'-'];['-';'-';'-']];;


(*------------------ PALIER 3 ------------------*)


(*3.1 Conversion*) 

let rec sentence_to_morse a = match a with
  |[] -> []
  |e::b -> (word_to_morse e)::(sentence_to_morse b );;

sentence_to_morse [['t';'o'];['m';'e']];;


(*3.2 char list list*)

let rec sentence_to_single_list a = match a with
  |[] -> []
  |e::a -> append (to_single_list e) ('/'::sentence_to_single_list a);;

sentence_to_single_list [[['-'];['-';'-';'-']];[['-';'-'];['.']]];;


(*3.3 Sans escales*)

let rec to_single_morse a = match a with
  |[] -> []
  |e::a -> to_single_list (letter_to_morse(e)::(word_to_morse a));;

to_single_morse ['S';'O';'S']


let rec latin_sentence_to_single a = match a with
  |[] -> []
  |e::l -> append (to_single_morse e) ('/'::latin_sentence_to_single l);;

latin_sentence_to_single [['T';'O'];['M';'E']];;


(*------------------ PALIER 4 ------------------*)

let latin_to_morse a =
  let rec latin a l n max = match (a,n) with
    |(_,n) when n=max -> reverse (l)::[]
    |(_,_) -> if a.[n] = ' ' then reverse (l)::(latin a [] (n+1) max)
              else (latin a (a.[n]::l) (n+1) max)
  in
  print (latin_sentence_to_single (latin a [] 0 (String.length a)));;

latin_to_morse "Vive Les Listes";;

(*------------------ PALIER 5 ------------------*)

 let morse_to_lettere morse = match morse with
   |['.';'-'] -> 'A'
   |['-';'.';'.';'.'] -> 'B'
   |['-';'.';'-';'.'] -> 'C'
   |['-';'.';'.'] -> 'D'
   |['.'] -> 'E'
   |['.';'.';'-';'.'] -> 'F'
   |'G' -> ['-';'-';'.'] -> 'G'
   |['.';'.';'.';'.'] -> 'H'
   |['.';'.'] -> 'I'
   |['-';'.';'.'] -> 'J'
   |['-';'.';'-'] -> 'K'
   |['.';'-';'.';'.'] -> 'L'
   |['-';'-'] -> 'M'
   |['-';'.'] -> 'N'
   |['-';'-';'-'] -> 'O'
   |['.';'-';'-';'.'] -> 'P'
   |['-';'-';'.';'-'] -> 'Q'
   |['.';'-';'.'] -> 'R'
   |['.';'.';'.'] -> 'S'
   |['-'] -> 'T'
   |['.';'.';'-'] -> 'U'
   |['.';'.';'.';'-'] -> 'V'
   |['.';'-';'-'] -> 'W'
   |'-';'.';'.';'-'] -> 'X'
   |['-';'.';'-';'-'] -> 'Y'
   |['-';'-';'.';'.'] -> 'Z'
   |['.';'-';'-';'-';'-'] -> '1'
   |['.';'.';'-';'-';'-'] -> '2'
   |['.';'.';'.';'-';'-'] -> '3'
   |['.';'.';'.';'.';'-'] -> '4'
   |['.';'.';'.';'.';'.'] -> '5'
   |['-';'.';'.';'.';'.'] -> '6'
   |['-';'-';'.';'.';'.'] -> '7'
   |['-';'-';'-';'.';'.'] -> '8'
   |['-';'-';'-';'-';'.'] -> '9'
   |['-';'-';'-';'-';'-'] -> '0'
   |_ -> failwith "Not Morse Input";;
